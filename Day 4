---------------------------------Day 4-------------------

---------Lesson 1--------------------

/*
 Реляционные базы данных - это базы данных у которых есть связи между собой с помощью каких-то отношений.
 Эти связи(отношения) осуществляются за щет внешних ключей.

 Избиточность данных - это хранения одних и тех самых файлов в базе данных, но в разных местах,
 и это производит к разным аномалтям.

 Нормализация - это способ проектирования базы данных который привод к минимальной избыточности.
 Чтобы этого достичь мы используем нормальные формы баз данных.

 Нормлаьная форма базы данных - это набор привил, критериев которым база данных должна соответсвовать

 Перечень нормальных форм:
 1. Ненормализованая(нулевая формальная) (UNF)
 2. Первая нормальная (1NF)
 3. Вторая нормальная (2NF)
 3  Третья нормальная (3NF)
 4..
 5..

 Есть и остальные перечни, но обычно используются только эти, чтобы сохранить хорошою производительность.
 Каждая высшая нормальная форма содержит в себе предыдущие, то есть если у нас 2 форма, она будет содержать 1 и 0
 */


---------Lesson 2--------------------

/*
 Как уже говорилось, каждая нормальная форма должна слдержать в себе предыдущую,
 сейчас мы рассмотрим 3 базовые формы которые избавят нас от ключевых проблем

 UNF - в базе творится не пойми-чтоЮ может быть дублироваие, неатомарные значения

 1NF - нацелена на соблюдение простейших правил:
    - В таблице не должно быть дублирования
    - Все столбцы должны быть атомарными(в них должно быть уложено только 1 значение)
    - В столбце хранятся данные только 1 типа

 2NF - нацелена на первичный ключ:
    - Таблтца должна находится в 1 номральной форме
    - Таблица должна иметь первичный ключ (PRIMARY KEY)
    - Все неключевые стоблцы (обчные столбцы, не ключевые) должны зависеть от
        полного первичного ключа (в случае если он составной) Составной первичный ключ - это
            комбинация 2 и больше первичный ключей, от которых зависит уникальность, но если же неключевым
                столбцам хватит для уникальности только 1 ключа, то остальные делать нельзя

 3NF - нацелен на неключевые столбцы:
    - Таблица должна находится во 2 нормальной форме
    - В таблице должна отсутсвовать транзитивная зависимость неключевых столбцов
        (нельзя чтобы неключевой столбец зависел от другого неключевого)
            Если нам все таки нужно установить связь, то нужно установить внешний ключ,
                который будет ссылатся на пераичный ключ другой таблицы, и тогда мы достигнем 3 нормальной формы
 */


--------- Lesson 3 --------------------

/*
 Как уже упоминалось выше, связь между таблтцами устанавливется с помощью первичных ключей, и внеших,
 которые ссылаются на них

 Существует 3 вида связывания:

1.Многие ко многим:
    Представим, что нам нужно написать БД, которая будет хранить работником IT-компании.
    При этом существует некий стандартный набор должностей. При этом:

        - Работник может иметь одну и более должностей. Например, некий работник может быть и админом, и программистом.
        - Должность может «владеть» одним и более работников. Например, админами является определенный набор работников.
            Другими словами, к админам относятся некие работники.

    Чтобы реализовать такой тип связывания мы должны придти к данному способу:
        Мы уже имеем две таблицы, описывающие работника и профессию.
        Теперь нам нужно установить между ними связь многие ко многим.
        Для реализации такой связи нам нужен некий посредник между таблицами

    В нашем случае это будет некая таблица работников и должностей.
    Эта таблица-посредник связывает между собой работника и должность следующим образом:
        -Мы берем адйти роботника и вставляем и вставляем в таблицу как внешний ключ который ссылается на таблицу роботников
        -Мы берем айди должности и вставляем и вставляем в таблицу как внешний ключ который ссылается на таблицу должностей

    EmployeeId	PositionId
    1	        1
    1	        2
    2	        3
    3	        3

    Таким образом, мы говорим, что работник с id 1 находится на должность с id 1.
    При этом обратите внимание на то, что в этой таблице работник с id 1 имеет две должности: 1 и 2.
    Т.е., каждому работнику слева соответствует некая должность справа.

    И еще мытакже можем сказать, что должности с id 3 принадлежат пользователи с id 2 и 3.
    Т.е., каждой роли справа принадлежит некий работник слева.


2.Один к многоим:
    Предположим, нам нужно реализовать некую БД, которая ведет учет данных о пользователях.
    У пользователя есть: имя, фамилия, возраст, номера телефонов.
    При этом у каждого пользователя может быть от одного и больше номеров телефонов (многие номера телефонов).

    В этом случае мы наблюдаем следующее:
    пользователь может иметь многие номера телефонов, но нельзя сказать, что номеру телефона принадлежит определенный пользователь.
    Другими словами, телефон принадлежит только одному пользователю. А пользователю могут принадлежать 1 и более телефонов (многие).

 Чтобы реализовать такое тип связывания мы прибеагем к следующему:
    Пользователей будет представлять некая таблица «Person» (id, имя, фамилия, возраст),
    номера телефонов будет представлять таблица «Phone». Она будет выглядеть так:

        PhoneId 	PersonId	PhoneNumber
        1	        5	        11 091-10
        2	        5	        19 124-66
        3	        17	        21 972-02

    Данная таблица представляет три номера телефона.
    При этом номера телефона с id 1 и 2 принадлежат пользователю с id 5. А вот номер с id 3 принадлежит пользователю с id 17.


3.Один к одному:
 Представим, что на работе вам дали задание написать БД для учета всех работников для HR.
 Начальник уверял, что компании нужно знать только об имени, возрасте и телефоне работника.
 Вы разработали такую БД и поместили в нее всю 1000 работников компании.
 И тут начальник говорит, что им зачем-то нужно знать о том, является ли работник инвалидом или нет.
 Наиболее простое, что приходит в голову — это добавить новый столбец типа bool в вашу таблицу.
 Но это слишком долго вписывать 1000 значений и ведь true вы будете вписывать намного реже, чем false (2% будут true, например).

Более простым решением будет создать новую таблицу, назовем ее «DisabledEmployee». Она будет выглядеть так:

    DisabledPersonId	EmployeeId
    1	                159
    2	                722
    3	                937

    Но это еще не связь один к одному.
    Дело в том, что в такую таблицу работник может быть вписан более одного раза,
    соответственно, мы получили отношение один ко многим работник может быть несколько раз инвалидом.

 Нужно сделать так, чтобы работник мог быть вписан в таблицу только один раз, соответственно, мог быть инвалидом только один раз.
 Для этого нам нужно указать, что столбец EmployeeId может хранить только уникальные значения.
 Нам нужно просто наложить на столбец EmloyeeId ограничение unique или тоже сделать его primary key(уникальный и не = 0).
 Это ограничение сообщает, что атрибут может принимать только уникальные значения.
 Выполнив это мы получили связь один к одному.

*/

--------- Lesson 4 --------------------
/**
  Также соедениение таблиц можно осуществить с помощью
  1. INNER JOIN(JOIN) - отсекает все значение где внешний ключ = null
  2. CROSS JOIN
  3. OUTER JOIN
    - LEFT OUTER JOIN (LEFT JOIN)
    - RIGHT OUTER JOIN (RIGHT JOIN)
    - FULL OUTER JOIN (FULL JOIN)
 */
CREATE SCHEMA day_4_schema;

CREATE TABLE company
(
    id   SERIAL PRIMARY KEY,
    name VARCHAR(128) NOT NULL
);
DROP TABLE company CASCADE;
CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY,
    name       VARCHAR(128) NOT NULL,
    surname    VARCHAR(128) NOT NULL,
    company_id INT REFERENCES company ON DELETE CASCADE
);

INSERT INTO company (name)
VALUES ('Google'),
       ('Microsoft'),
       ('Apple'),
       ('Uber'),
       ('Amazon'),
       ('Meta'),
       ('Facebook');

INSERT INTO employee (name, surname, company_id)
VALUES ('Anrii', 'Synko', 1),
       ('Jakub', 'Varga', 2),
       ('Ruslan', 'Prodan', 3),
       ('Ruslan', 'Ursta', 4),
       ('Anton', 'Penzeshtadler', 5),
       ('Andriy', 'Jancikn', 6),
       ('Matey', 'Slnek', 7),
       ('Tomas', 'Moravcik', NULL),
       ('Tomas', 'Labar', NULL),
       ('Danil', 'Atukmaiev', NULL);

SELECT employee.name || ' ' || employee.surname fio,
       c.name
FROM employee
         JOIN company c on c.id = employee.company_id;

CREATE TABLE contact
(
    id     SERIAL PRIMARY KEY,
    number INT NOT NULL UNIQUE,
    type   VARCHAR(128)
);

INSERT INTO contact (number, type)
VALUES (0950382148, 'домашний'),
       (0950382147, 'рабочий'),
       (0984774405, NULL),
       (0963319598, NULL),
       (0976564382, 'рабочий');

CREATE TABLE employee_contact
(
    employee_id INT REFERENCES employee,
    contact_id  INT REFERENCES contact
);

INSERT INTO employee_contact (employee_id, contact_id)
VALUES (1, 1),
       (1, 2),
       (2, 3),
       (3, 3),
       (4, 3),
       (5, 4),
       (6, 5),
       (7, 5);

SELECT employee.name,
       c.number,
       c.type,
       ec
FROM employee
         JOIN employee_contact ec ON employee.id = ec.employee_id
         JOIN contact c on ec.contact_id = c.id;

SELECT employee.name,
       employee.surname,
       t.number
FROM employee
         CROSS JOIN (SELECT number FROM contact) t;

-- RIGHT JOIN показывает все записи справа от соеденения,
-- LEFT JOIN показывает все записи слева от соеденения
-- FULL JOIN показывает все соеденения

SELECT c.name,
       e.name || ' ' || e.surname
FROM company c
         RIGHT JOIN employee e on c.id = e.company_id;

SELECT c.name,
       e.name
FROM company c
         LEFT JOIN employee e on c.id = e.company_id;

SELECT c.name,
       e.name
FROM company c
         FULL JOIN employee e on c.id = e.company_id;

SELECT c.name,
       e.name
FROM company c
         JOIN employee e on c.id = e.company_id;

SELECT c.name,
       e.name || ' ' || e.surname
FROM company c
         CROSS JOIN (SELECT * FROM employee) e;
