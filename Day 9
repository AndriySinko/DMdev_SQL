---------------------- Day 9 -----------------

-------- Lesson 1 --------------

/**

  BigQuery

  DWH - это хранилище которое хранит только нужные данные для компании, на основании которых будет проводится
  анализ и принятие базнес решений

  Отличия между DWH и обычними бащами данных:

  1.Обачные СУБД хранят данные строго под какие-то подсистемы
  Например баща данных task_books хранит данные о книгах, а flight_repository хранит данные о перелетах
  А DWN хранит данные из разным областей, которые каким-либо образом относятся к бизнесу

  2.Обычные СУБД ипользуются для хранения актуальной информации, чтобы определенная система
  корректно работала в нужный момент времени.
  А в DWH могут хранится копии данных (иногда и копии целых баз данных), а также историчиские данные и агрегированые
  значения

  Процес заполнения данными:
  Информации почти сразу попадает в класическуб нам СУБД, а оттуда переходит в DWH, но перед этим проходит
  обработку и преобразование. По сути DWH отражает состояние других БД уже после того как в них внесутся изменения

  То есть из источников(неважно каких) данные попадают в СУБД потом они обрабатываются с помощтю ETL
  (Extract, Transform, Load) - извлечение, трансформирование, загруза в DWH
 */


-------- Lesson 2 --------------

/*
 Если у нас есть система какая работает на основе нашей базы данных, то если с нашец базой данных что-то случится
 то вся система для всех пользователей перестанет работать. Чтобы это устранить используется копирование базы.

 Репликация баз данных - процес который копирует данные из одного источника в другой/другие ил наоборот.
 Репликация может быть
    - синхронной(происходит в той же транзакции практически срауз) - при отправлении запроса база будет ждать
        возвращение этого запроса из всех копий, и только тогда выполнит наш запрос
    - асинхронной(происходит спустя какое-то время в разных транзакциях) - при отправлении баща не ждет совместного
        возвращения данных запроса, а сразу возвращает данные с копии, что позволяет улучшить производительность

 Репликая может выполнатся с помощью:
    - Master - Slave - Master отвечает за все, он выполняет все запросы на изменеия, удаление, добавление,
    а Slave доступны только запросы на чтение

    - Master - Master - Каждя из реплик самостоятельна, может выполнять запросы на удаление изменение и т.д

 Если у нас очень большое кол-во данных то мы используем Фрагментацию или сегментацию базы данных -
 это процесс розделения одной больщой базы на несколько более мелких автономных разделов. Каждый раздел имеет
 одинаковую схему и столбцы, но разные сроки. Данные хранящиеся в каждом из низ уникальны и не зависят от данных
 хранящихся в других разделах

 Так же можно комбинировать и репликацию и фрагментацию вместе и получать конструкции которые называются
 Распределенная база данных - это ьаза в которой составные часим находятся в разных узлах компьтерной сети в соотвествии
 каким-то критериям.

 Вследствии этого у нас появляется купа проблем, и есть теорема которое это опиывает

 Теорема CAP - это теорема утверждающая что при разработаке распределнной системы вы не можете достичь одновременно
 трех свойст:
 Согласованость - каждое чтение дает нам самую последнюю запись
 Доступность - система всгда успешно выполнчет запросы, даже если имеются упавшие узлы
 Устойчивость к разделению - даже если между узлами пропала связь они продолжат рабоать независимо друг от друга,
    и продолжат выполнять запросы

 Вы одновременно можете выбрать только два из трех но никак не всех сразу

 NoSQL - нереляционные базф данных которые специально предназначены для работы в рампределнных системах, с большим
 обьемом данных, которые не помещаются в один узел

 Основные типы NoSQL:
 - БД на основе пар ключ значение
 - Документно-ориентированые БД
 - Графовые
 - БД в памяти
 - Поисковые БД
 */
